Security:
  ☐ test sql injection

Chores:
  ☐ use tsconfig for typings tests

PostgreMote:
  ☐ implement an SQL-like DSL
    ✔ change all operands to lower case to follow the sql formatting style @done
    ✔ rename jsql.equals binary expression function to jsql.equalTo @done
    ✔ implement Timestamp type @done
    ✔ implement Timestamp.now static method @done
    ✔ implement Timestamp.interval static method @done
    ☐ implement jsql.and binary expression function
    ☐ implement jsql.or binary expression function
    ☐ implement jsql.not expression function
    ☐ implement jsql.greaterThan binary expression function
    ☐ implement jsql.lessThan binary expression function
    ☐ implement jsql.greatThanOrEqualTo binary expression function
    ☐ implement jsql.lessThanOrEqualTo binary expression function
    ☐ implement jsql.notEqual binary expression function
    ☐ implement jsql.addition binary expression function
    ✔ implement jsql.subtraction binary expression function @done
    ☐ implement jsql.multiplication binary expression function
    ☐ implement jsql.division binary expression function
    ☐ implement jsql.modulo binary expression function
    ☐ implement jsql.exponentiation binary expression function
    ☐ implement jsql.squareRoot expression function
    ☐ implement jsql.cubeRoot expression function
    ☐ implement jsql.factorial expression function
    ☐ implement jsql.absoluteValue expression function
    ☐ implement jsql.bitwiseAnd binary expression function
    ☐ implement jsql.bitwiseOr binary expression function
    ☐ implement jsql.bitwiseXor binary expression function
    ☐ implement jsql.bitwiseNot expression function
    ☐ implement jsql.bitwiseShiftLeft binary expression function
    ☐ implement jsql.bitwiseShiftRight binary expression function
    ☐ add joins
    ☐ add subqueries
    ☐ improve jsql with runtime guards
    ☐ get rid of sqlstring dependency
  ☐ implement a request method that infer select types and wrap it with Promise
    ☐ find the way to compile client for client-side without server-side code
  ☐ implement a tool that generates TypeScript code for PostgreSQL stored functions and tables from the chosen schemas
    ☐ full type inference with postgresql data types
    ☐ generate procedures
    ☐ use project-wide prettier settings
  ☐ implement database migration tool for PostgreMote with auto code generation
  ☐ implement database testing tool PostgreMote with all the generated types used so we could make a static analysis over the tests
  ☐ implement postgresql code coverage tool
  ☐ implement database management interface that simplifies working with migrations and code coverage

Bundler:
  ☐ implement bibimbap's own bundler (yeah, I know this is probably too much, but another bundler are too slow)

Create Bibimbap App:
  ☐ add @bibimbap/create package
  ☐ configure create package to initialize project with all requirements and default directory structure

DesignPad:
  ✔ implement .design.ts file format library for declaring frames to render @done
  ☐ build out runner that starts bundler and puppeteer and collects all the .design.ts files
  ☐ implement main app that renders frames one next to another
  ☐ implement navigation between frames using arrows
  ☐ make puppeteer split all the frames between maximum amount of openned tabs
  ☐ make a screenshot of each frame on bundler change
  ☐ compare new screenshot with previous version
  ☐ warn main app with list of visual diffs
  ☐ add ability to set visible frame as wip
  ☐ automatically disable wip for frames that aren't visible
  ☐ exclude wip frames from snapshot comparison
  ☐ add capability to make screenshots using selenium driver and browserstack for cross-browser experience

Test runner:
  ☐ implement .test.ts file format library for declaring tests to run
  ☐ use designpad's runner and existing instance of puppeteer to run test files
  ☐ provide way to mark test files as server-side only
  ☐ run server-side only tests using deisgnpad's node executable process
  ☐ provide way to mark test files as multi-thread ready
  ☐ run mutl-thread ready test suites in parallel both in puppeteer and node test runner
  ☐ collect js coverage both in puppeteer and node test runner
  ☐ combine puppeteer and node test runner coverage reports
  ☐ notify user about uncovered parts of the code

UI state management:
  ☐ finite-state machine based store
  ☐ render state diagram in designpad
  ☐ render app states within diagram

Business logic module:
  ☐ implement test-saga like module for redux-saga testing but with capability to render flowcharts based on them
  ☐ implement black-box testing of sagas

Archive:
  ✔ add where clause @done @project(PostgreMote)
  ✔ get rid of defaulValue for columns, because they are supposed to be generated from database @done @project(PostgreMote)
  ✔ get rid of default schema and set up search_path to nothing @done @project(PostgreMote)
  ✔ use pg_catalog instead of information_schema @done @project(PostgreMote)
  ✔ generate columns with all of the settings @done @project(PostgreMote)
  ✔ generate functions @done @project(PostgreMote)
  ✔ generate views @done @project(PostgreMote)
  ✔ use typescript public API instead of string compilation @done @project(PostgreMote)
  ✔ generate tables @done @project(PostgreMote)
  ✔ add multiple from clauses @done @project(PostgreMote)
  ✔ implement http method @done @project(PostgreMote)
  ✔ develop simple implementation that uses just configured pool for server side use @done @project(PostgreMote)
  ✔ infer select types @done @project(PostgreMote)
  ✔ get rid of tuple to union transformation legacy of the first version @done @project(PostgreMote)
  ✔ implement a simple server that converts an SQL-like DSL received over some sort of protocol and then makes a request to the database @done @project(PostgreMote)
  ✔ update merge dependency @done @project(Security)
  ✔ make sure user can't work with postgres internal data structures except those that explicitly allowed to use @done @project(PostgreMote)
  ✔ implement server bootstrap that populates token type oid based on the provided token type name @done @project(PostgreMote)
  ✔ pack the whole server as an express middleware with ability to provide configuration and connection pool link @done @project(PostgreMote)
  ✔ guard everything up @done @project(PostgreMote)
  ✔ set up error handling for all of the cases that are not 42501 @done @project(PostgreMote)
  ✔ implement function @done @project(PostgreMote)
  ✔ get rid of create, drop, grant, and revoke statements (because the only provided statements should be select, insert, delete, update, function calls) @done @project(PostgreMote)
  ✔ implement endpoint for setting cookie with jwt up @done @project(PostgreMote)
  ✔ use default guest role name provided from configuration @done @project(PostgreMote)
  ✔ use namespaced names for in app settings @done @project(PostgreMote)
  ✔ make possible to configure which scheme is public, schema with name public should be default @done @project(PostgreMote)
  ✔ implement jsql.revoke @done @project(PostgreMote)
  ✔ implement jsql.drop(table) @done @project(PostgreMote)
  ✔ implement jsql.drop(role) @done @project(PostgreMote)
  ✔ add ifExists to jsql.drop table and role @done @project(PostgreMote)
  ✔ rename enum from types to kinds @done @project(PostgreMote)
  ✔ rename typing file name and dir to typings @done @project(PostgreMote)
  ✔ set role from jwt sub if there is a jwt in cookie @done @project(PostgreMote)
  ✔ use typescript compiler api to test typings @done @project(PostgreMote)
  ✔ add type-checking for default values of the column @done @project(PostgreMote)
  ✔ check if there is at least one value to insert @done @project(PostgreMote)
  ✔ implement jsql.grant @done @project(PostgreMote)
  ✔ use symbols instead of $ and $$ @done(symbols cannot be serialized/deserialized using JSON) @project(PostgreMote)
  ✔ implement jsql.insert @done @project(PostgreMote)
  ✔ check if columns for insert closure were declared in the table @done @project(PostgreMote)
  ✔ report strange behavior for conditional types returning @done (unfortunately don't have any willpower to do this) @project(PostgreMote)
  ✔ check if columns with default values can be skiped @done @project(PostgreMote)
  ✔ implement jsql.role @done @project(PostgreMote)
  ✔ implement jsql.create(role) @done @project(PostgreMote)
  ✔ use $ as a JSQL type definition and $$ as a table name @done @project(PostgreMote)
  ✔ escape string values @done @project(PostgreMote)
  ✔ configure jest and wallaby @done @project(PostgreMote)
  ✔ jsql should be serializable and jsql DSL feature-rich @done @project(PostgreMote)
