Security:
  ☐ update merge dependency
  ☐ test sql injection

Chores:
  ☐ use tsconfig for typings tests

PostgreMote:
  ☐ implement an SQL-like DSL
    ☐ improve jsql with runtime guards
    ☐ get rid of sqlstring dependency
    ☐ check if column names are unique for each table
  ☐ implement a simple server that converts an SQL-like DSL received over some sort of protocol and then makes a request to the database
    ☐ pack the whole server as an express middleware
  ☐ implement a tool that generates TypeScript code for PostgreSQL stored functions and tables from the chosen scheme
  ☐ implement database migration tool for PostgreMote with auto code generation
  ☐ implement database testing tool PostgreMote with all the generated types used so we could make a static analysis over the tests
  ☐ implement postgresql code coverage tool
  ☐ implement database management interface that simplifies working with migrations and code coverage

DesignPad:
  ☐ implement storybook-like tool but with ability to render more than one story at a time and with a builtin visual regression testing

Test runner:
  ☐ implement bibimbap's own test runner

Archive:
  ✔ implement jsql.revoke @done @project(PostgreMote)
  ✔ implement jsql.drop(table) @done @project(PostgreMote)
  ✔ implement jsql.drop(role) @done @project(PostgreMote)
  ✔ add ifExists to jsql.drop table and role @done @project(PostgreMote)
  ✔ rename enum from types to kinds @done @project(PostgreMote)
  ✔ rename typing file name and dir to typings @done @project(PostgreMote)
  ✔ set role from jwt sub if there is a jwt in cookie @done @project(PostgreMote)
  ✔ use typescript compiler api to test typings @done @project(PostgreMote)
  ✔ add type-checking for default values of the column @done @project(PostgreMote)
  ✔ check if there is at least one value to insert @done @project(PostgreMote)
  ✔ implement jsql.grant @done @project(PostgreMote)
  ✔ use symbols instead of $ and $$ @done(symbols cannot be serialized/deserialized using JSON) @project(PostgreMote)
  ✔ implement jsql.insert @done @project(PostgreMote)
  ✔ check if columns for insert closure were declared in the table @done @project(PostgreMote)
  ✔ report strange behavior for conditional types returning @done (unfortunately don't have any willpower to do this) @project(PostgreMote)
  ✔ check if columns with default values can be skiped @done @project(PostgreMote)
  ✔ implement jsql.role @done @project(PostgreMote)
  ✔ implement jsql.create(role) @done @project(PostgreMote)
  ✔ use $ as a JSQL type definition and $$ as a table name @done @project(PostgreMote)
  ✔ escape string values @done @project(PostgreMote)
  ✔ configure jest and wallaby @done @project(PostgreMote)
  ✔ jsql should be serializable and jsql DSL feature-rich @done @project(PostgreMote)
