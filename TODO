Security:
  ☐ test sql injection

Chores:
  ☐ use tsconfig for typings tests

PostgreMote:
  ☐ implement an SQL-like DSL
    ☐ add where clause
    ✔ add multiple from clauses @done
    ☐ add joins
    ☐ improve jsql with runtime guards
    ☐ get rid of sqlstring dependency
    ☐ check if column names are unique for each table
  ☐ implement a request method that infer select types and wrap it with Promise
    ✔ implement http method @done
    ☐ find the way to compile client for client-side without server-side code
  ☐ implement a tool that generates TypeScript code for PostgreSQL stored functions and tables from the chosen schemas
  ☐ implement database migration tool for PostgreMote with auto code generation
  ☐ implement database testing tool PostgreMote with all the generated types used so we could make a static analysis over the tests
  ☐ implement postgresql code coverage tool
  ☐ implement database management interface that simplifies working with migrations and code coverage

DesignPad:
  ☐ implement storybook-like tool but with ability to render more than one story at a time and with a builtin visual regression testing

Test runner:
  ☐ implement bibimbap's own test runner

Archive:
  ✔ develop simple implementation that uses just configured pool for server side use @done @project(PostgreMote)
  ✔ infer select types @done @project(PostgreMote)
  ✔ get rid of tuple to union transformation legacy of the first version @done @project(PostgreMote)
  ✔ implement a simple server that converts an SQL-like DSL received over some sort of protocol and then makes a request to the database @done @project(PostgreMote)
  ✔ update merge dependency @done @project(Security)
  ✔ make sure user can't work with postgres internal data structures except those that explicitly allowed to use @done @project(PostgreMote)
  ✔ implement server bootstrap that populates token type oid based on the provided token type name @done @project(PostgreMote)
  ✔ pack the whole server as an express middleware with ability to provide configuration and connection pool link @done @project(PostgreMote)
  ✔ guard everything up @done @project(PostgreMote)
  ✔ set up error handling for all of the cases that are not 42501 @done @project(PostgreMote)
  ✔ implement function @done @project(PostgreMote)
  ✔ get rid of create, drop, grant, and revoke statements (because the only provided statements should be select, insert, delete, update, function calls) @done @project(PostgreMote)
  ✔ implement endpoint for setting cookie with jwt up @done @project(PostgreMote)
  ✔ use default guest role name provided from configuration @done @project(PostgreMote)
  ✔ use namespaced names for in app settings @done @project(PostgreMote)
  ✔ make possible to configure which scheme is public, schema with name public should be default @done @project(PostgreMote)
  ✔ implement jsql.revoke @done @project(PostgreMote)
  ✔ implement jsql.drop(table) @done @project(PostgreMote)
  ✔ implement jsql.drop(role) @done @project(PostgreMote)
  ✔ add ifExists to jsql.drop table and role @done @project(PostgreMote)
  ✔ rename enum from types to kinds @done @project(PostgreMote)
  ✔ rename typing file name and dir to typings @done @project(PostgreMote)
  ✔ set role from jwt sub if there is a jwt in cookie @done @project(PostgreMote)
  ✔ use typescript compiler api to test typings @done @project(PostgreMote)
  ✔ add type-checking for default values of the column @done @project(PostgreMote)
  ✔ check if there is at least one value to insert @done @project(PostgreMote)
  ✔ implement jsql.grant @done @project(PostgreMote)
  ✔ use symbols instead of $ and $$ @done(symbols cannot be serialized/deserialized using JSON) @project(PostgreMote)
  ✔ implement jsql.insert @done @project(PostgreMote)
  ✔ check if columns for insert closure were declared in the table @done @project(PostgreMote)
  ✔ report strange behavior for conditional types returning @done (unfortunately don't have any willpower to do this) @project(PostgreMote)
  ✔ check if columns with default values can be skiped @done @project(PostgreMote)
  ✔ implement jsql.role @done @project(PostgreMote)
  ✔ implement jsql.create(role) @done @project(PostgreMote)
  ✔ use $ as a JSQL type definition and $$ as a table name @done @project(PostgreMote)
  ✔ escape string values @done @project(PostgreMote)
  ✔ configure jest and wallaby @done @project(PostgreMote)
  ✔ jsql should be serializable and jsql DSL feature-rich @done @project(PostgreMote)
